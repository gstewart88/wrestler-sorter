{"ast":null,"code":"/**\n * Merge‐insertion (Ford–Johnson) sort using async compare callback.\n * @param {Array} arr         – items to sort\n * @param {Function} compare  – async (a, b) => preferred item\n * @returns {Promise<Array>}  – sorted array\n */\nexport default async function fordJohnsonSort(arr, compare) {\n  const n = arr.length;\n  if (n <= 1) return arr;\n\n  // 1. Pair up and record winners & losers\n  const winners = [];\n  const losers = [];\n  for (let i = 0; i + 1 < n; i += 2) {\n    const a = arr[i],\n      b = arr[i + 1];\n    const preferred = await compare(a, b);\n    if (preferred === a) {\n      winners.push(a);\n      losers.push(b);\n    } else {\n      winners.push(b);\n      losers.push(a);\n    }\n  }\n\n  // If odd, last element goes straight to losers\n  if (n % 2 === 1) {\n    losers.push(arr[n - 1]);\n  }\n\n  // 2. Recursively sort winners\n  const mainChain = await fordJohnsonSort(winners, compare);\n\n  // 3. Insert each loser via binary insertion\n  for (const item of losers) {\n    let low = 0;\n    let high = mainChain.length;\n    while (low < high) {\n      const mid = Math.floor((low + high) / 2);\n      // Ask user: do you prefer item or mainChain[mid]?\n      const preferred = await compare(item, mainChain[mid]);\n      if (preferred === item) {\n        // item goes before position mid\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n    mainChain.splice(low, 0, item);\n  }\n  return mainChain;\n}","map":{"version":3,"names":["fordJohnsonSort","arr","compare","n","length","winners","losers","i","a","b","preferred","push","mainChain","item","low","high","mid","Math","floor","splice"],"sources":["/Users/graemestewart/Developer/wrestler-sorter/frontend/src/utils/fordJohnsonSort.js"],"sourcesContent":["/**\n * Merge‐insertion (Ford–Johnson) sort using async compare callback.\n * @param {Array} arr         – items to sort\n * @param {Function} compare  – async (a, b) => preferred item\n * @returns {Promise<Array>}  – sorted array\n */\nexport default async function fordJohnsonSort(arr, compare) {\n  const n = arr.length;\n  if (n <= 1) return arr;\n\n  // 1. Pair up and record winners & losers\n  const winners = [];\n  const losers  = [];\n  for (let i = 0; i + 1 < n; i += 2) {\n    const a = arr[i], b = arr[i + 1];\n    const preferred = await compare(a, b);\n    if (preferred === a) {\n      winners.push(a);\n      losers.push(b);\n    } else {\n      winners.push(b);\n      losers.push(a);\n    }\n  }\n\n  // If odd, last element goes straight to losers\n  if (n % 2 === 1) {\n    losers.push(arr[n - 1]);\n  }\n\n  // 2. Recursively sort winners\n  const mainChain = await fordJohnsonSort(winners, compare);\n\n  // 3. Insert each loser via binary insertion\n  for (const item of losers) {\n    let low = 0;\n    let high = mainChain.length;\n    while (low < high) {\n      const mid = Math.floor((low + high) / 2);\n      // Ask user: do you prefer item or mainChain[mid]?\n      const preferred = await compare(item, mainChain[mid]);\n      if (preferred === item) {\n        // item goes before position mid\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n    mainChain.splice(low, 0, item);\n  }\n\n  return mainChain;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAeA,eAAeA,CAACC,GAAG,EAAEC,OAAO,EAAE;EAC1D,MAAMC,CAAC,GAAGF,GAAG,CAACG,MAAM;EACpB,IAAID,CAAC,IAAI,CAAC,EAAE,OAAOF,GAAG;;EAEtB;EACA,MAAMI,OAAO,GAAG,EAAE;EAClB,MAAMC,MAAM,GAAI,EAAE;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAGJ,CAAC,EAAEI,CAAC,IAAI,CAAC,EAAE;IACjC,MAAMC,CAAC,GAAGP,GAAG,CAACM,CAAC,CAAC;MAAEE,CAAC,GAAGR,GAAG,CAACM,CAAC,GAAG,CAAC,CAAC;IAChC,MAAMG,SAAS,GAAG,MAAMR,OAAO,CAACM,CAAC,EAAEC,CAAC,CAAC;IACrC,IAAIC,SAAS,KAAKF,CAAC,EAAE;MACnBH,OAAO,CAACM,IAAI,CAACH,CAAC,CAAC;MACfF,MAAM,CAACK,IAAI,CAACF,CAAC,CAAC;IAChB,CAAC,MAAM;MACLJ,OAAO,CAACM,IAAI,CAACF,CAAC,CAAC;MACfH,MAAM,CAACK,IAAI,CAACH,CAAC,CAAC;IAChB;EACF;;EAEA;EACA,IAAIL,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;IACfG,MAAM,CAACK,IAAI,CAACV,GAAG,CAACE,CAAC,GAAG,CAAC,CAAC,CAAC;EACzB;;EAEA;EACA,MAAMS,SAAS,GAAG,MAAMZ,eAAe,CAACK,OAAO,EAAEH,OAAO,CAAC;;EAEzD;EACA,KAAK,MAAMW,IAAI,IAAIP,MAAM,EAAE;IACzB,IAAIQ,GAAG,GAAG,CAAC;IACX,IAAIC,IAAI,GAAGH,SAAS,CAACR,MAAM;IAC3B,OAAOU,GAAG,GAAGC,IAAI,EAAE;MACjB,MAAMC,GAAG,GAAGC,IAAI,CAACC,KAAK,CAAC,CAACJ,GAAG,GAAGC,IAAI,IAAI,CAAC,CAAC;MACxC;MACA,MAAML,SAAS,GAAG,MAAMR,OAAO,CAACW,IAAI,EAAED,SAAS,CAACI,GAAG,CAAC,CAAC;MACrD,IAAIN,SAAS,KAAKG,IAAI,EAAE;QACtB;QACAE,IAAI,GAAGC,GAAG;MACZ,CAAC,MAAM;QACLF,GAAG,GAAGE,GAAG,GAAG,CAAC;MACf;IACF;IACAJ,SAAS,CAACO,MAAM,CAACL,GAAG,EAAE,CAAC,EAAED,IAAI,CAAC;EAChC;EAEA,OAAOD,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}