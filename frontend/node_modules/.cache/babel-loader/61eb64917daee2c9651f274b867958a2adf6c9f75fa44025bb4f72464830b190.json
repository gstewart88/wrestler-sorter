{"ast":null,"code":"// Count worst-case Ford–Johnson comparisons for n items\nexport function countComparisons(n) {\n  function simulate(length) {\n    if (length <= 1) return 0;\n    let comp = 0;\n    const winners = [];\n    const losers = [];\n\n    // Pairing phase\n    for (let i = 0; i + 1 < length; i += 2) {\n      comp += 1; // one comparison per pair\n      winners.push(null);\n      losers.push(null);\n    }\n    if (length % 2 === 1) {\n      losers.push(null); // odd element goes to losers\n    }\n\n    // Recursively count for winners\n    comp += simulate(winners.length);\n\n    // Insertion phase: binary‐insert each loser\n    let chainLen = winners.length;\n    for (let i = 0; i < losers.length; i++) {\n      // worst‐case binary search cost = ceil(log2(chainLen+1))\n      comp += Math.ceil(Math.log2(chainLen + 1));\n      chainLen += 1;\n    }\n    return comp;\n  }\n  return simulate(n);\n}","map":{"version":3,"names":["countComparisons","n","simulate","length","comp","winners","losers","i","push","chainLen","Math","ceil","log2"],"sources":["/Users/graemestewart/Developer/wrestler-sorter/frontend/src/utils/countComparisons.js"],"sourcesContent":["// Count worst-case Ford–Johnson comparisons for n items\nexport function countComparisons(n) {\n  function simulate(length) {\n    if (length <= 1) return 0;\n\n    let comp = 0;\n    const winners = [];\n    const losers  = [];\n\n    // Pairing phase\n    for (let i = 0; i + 1 < length; i += 2) {\n      comp += 1;            // one comparison per pair\n      winners.push(null);\n      losers.push(null);\n    }\n    if (length % 2 === 1) {\n      losers.push(null);    // odd element goes to losers\n    }\n\n    // Recursively count for winners\n    comp += simulate(winners.length);\n\n    // Insertion phase: binary‐insert each loser\n    let chainLen = winners.length;\n    for (let i = 0; i < losers.length; i++) {\n      // worst‐case binary search cost = ceil(log2(chainLen+1))\n      comp += Math.ceil(Math.log2(chainLen + 1));\n      chainLen += 1;\n    }\n\n    return comp;\n  }\n\n  return simulate(n);\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,gBAAgBA,CAACC,CAAC,EAAE;EAClC,SAASC,QAAQA,CAACC,MAAM,EAAE;IACxB,IAAIA,MAAM,IAAI,CAAC,EAAE,OAAO,CAAC;IAEzB,IAAIC,IAAI,GAAG,CAAC;IACZ,MAAMC,OAAO,GAAG,EAAE;IAClB,MAAMC,MAAM,GAAI,EAAE;;IAElB;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,GAAGJ,MAAM,EAAEI,CAAC,IAAI,CAAC,EAAE;MACtCH,IAAI,IAAI,CAAC,CAAC,CAAY;MACtBC,OAAO,CAACG,IAAI,CAAC,IAAI,CAAC;MAClBF,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC;IACnB;IACA,IAAIL,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;MACpBG,MAAM,CAACE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAI;IACxB;;IAEA;IACAJ,IAAI,IAAIF,QAAQ,CAACG,OAAO,CAACF,MAAM,CAAC;;IAEhC;IACA,IAAIM,QAAQ,GAAGJ,OAAO,CAACF,MAAM;IAC7B,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,MAAM,CAACH,MAAM,EAAEI,CAAC,EAAE,EAAE;MACtC;MACAH,IAAI,IAAIM,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,IAAI,CAACH,QAAQ,GAAG,CAAC,CAAC,CAAC;MAC1CA,QAAQ,IAAI,CAAC;IACf;IAEA,OAAOL,IAAI;EACb;EAEA,OAAOF,QAAQ,CAACD,CAAC,CAAC;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}